<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context.xsd  
      http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <import resource="classpath:META-INF/applicationContext.xml" />

    <context:annotation-config></context:annotation-config>
    <context:component-scan base-package="com.ycmm.*">
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    <mvc:annotation-driven/>

   <mvc:interceptors>
    <bean class="com.ycmm.common.interceptor.ProcessInterceptor"></bean>
   </mvc:interceptors>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/" p:suffix=".jsp"/>

    <!-- 启动@AspectJ支持  关闭注解
    Spring 是这样处理AOP代理的问题的，它有两套动态代理的实现，一个是JDK方法的实现，一个就是cglib，
         proxy-target-class就是决定使用哪个实现方式的开关，当该值是false时，使用JDK的实现方式，这也是
         默认的实现方式，反之则使用cglib的实现方式。当我把该值设置为true时，也就是使用cglib
    -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>